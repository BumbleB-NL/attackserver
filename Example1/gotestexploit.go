//#!/usr/bin/env -S go run
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

// Function to fetch JSON and output the "flag" field
func fetchJSONAndOutputFlag(host string) {
	// Construct the URL
	url := fmt.Sprintf("http://%s/index.json", host)
	fmt.Printf("Url = %s\n", url)

	// Make the GET request
	resp, err := http.Get(url)
	if err != nil {
		fmt.Printf("Error fetching data from %s: %s\n", url, err)
		return
	}
	defer resp.Body.Close()

	// Check for a non-200 status code
	if resp.StatusCode != http.StatusOK {
		fmt.Printf("Error: received non-OK response: %d\n", resp.StatusCode)
		return
	}

	// Read the response body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("Error reading response body: %s\n", err)
		return
	}

	// Parse the JSON data
	var data map[string]interface{}
	if err := json.Unmarshal(body, &data); err != nil {
		fmt.Printf("Error parsing JSON: %s\n", err)
		return
	}

	// Check if the "flag" key exists in the JSON
	if flag, ok := data["flag"]; ok {
		fmt.Println(flag)
	} else {
		fmt.Println("Flag not found in the JSON.")
	}
}

func main() {
	// Ensure a host argument is provided
	if len(os.Args) != 2 {
		fmt.Println("Usage: go run script.go <host>")
		return
	}

	// Get the host argument
	host := os.Args[1]
	fmt.Printf("Host = %s\n", host)

	// Call the function to fetch the JSON and output the flag
	fetchJSONAndOutputFlag(host)
}
